grammar org.palladiosimulator.dataflow.dictionary.characterized.dsl.CharacterizedDataDictionary with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.palladiosimulator.dataflow.dictionary.characterized/model/DataDictionaryCharacterized.ecore"
import "platform:/resource/org.palladiosimulator.dataflow.dictionary.characterized/model/DataDictionaryCharacterized.ecore#//expressions" as ex
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://sdq.ipd.uka.de/Identifier/2.1"
//import "http://palladiosimulator.org/dataflow/dictionary/1.0" as DataDictionary

DataDictionaryCharacterized returns DataDictionaryCharacterized:
	{DataDictionaryCharacterized}
	'directory' 'id' id=STRING
	(
		enumerations+=Enumeration |
		characteristicTypes+=CharacteristicType |
		behaviorDefinitions+=BehaviorDefinition
	)*;

Enumeration:
	'enum' name=NameString '{'
		literals+=Literal (',' literals+=Literal)*
	'}'
;

Literal:
	name=NameString
;

CharacteristicType:
	EnumCharacteristicType
;


EnumCharacteristicType:
	'enumcharacteristic' name=NameString 'using' type=[Enumeration|NameString]
;

BehaviorDefinition:
	'behavior' name=NameString '{'
		('input' inputs+=Pin)*
		('output' outputs+=Pin)*
		assignments+=Assignment*
	'}'
;

Pin:
	name=NameString
;

Assignment:
	lhs=DataCharacteristicReference ':=' rhs=Term
;

Term returns ex::Term:
	 BinaryLogicTerm
;

BinaryLogicTerm returns ex::Term:
	UnaryLogicTerm (
		({ex::And.left=current} '&' right=UnaryLogicTerm) |
		({ex::Or.left=current} '|' right=UnaryLogicTerm) 
	)*
;

UnaryLogicTerm returns ex::Term:
	PrimaryTerm | ({ex::Not} '!' term=PrimaryTerm)
;

PrimaryTerm returns ex::Term:
	'(' BinaryLogicTerm ')' | True | False | EnumCharacteristicReference
;

False returns ex::Term:
	{ex::False} 'false'
;

True returns ex::Term:
	{ex::True} 'true'
;

EnumCharacteristicReference returns ex::Term:
	ContainerCharacteristicReference | DataCharacteristicReference
;

ContainerCharacteristicReference returns ex::ContainerCharacteristicReference:
	{ex::ContainerCharacteristicReference} 'container' (
		(characteristicType=[CharacteristicType|NameString] '.' (literal=[Literal|NameString] | '*')) | '*' '.' '*'
	)
;

DataCharacteristicReference returns ex::DataCharacteristicReference:
	{ex::DataCharacteristicReference}
		pin=[Pin|NameString] '.' (
			(characteristicType=[CharacteristicType|NameString] '.' (literal=[Literal|NameString] | '*')) | '*' '.' '*'
	)
;

NameString returns ecore::EString:
	STRING
;