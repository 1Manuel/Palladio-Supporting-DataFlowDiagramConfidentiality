import helpers.TransformationUtils;

library BPChecks;

modeltype DFD uses DataFlowDiagram('http://palladiosimulator.org/dataflow/diagram/1.0');
modeltype PL uses prolog('http://palladiosimulator.org/supporting/prolog/0.1.0');

mapping DFD::DataFlowDiagram::createReadWriteFlowCategorizationHelpers() : List(PL::Clause) {
	result += new Comment("");
	result += new Comment("Helper rules to classify data flows as read or write");
	result += new Comment("");
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "readFlows";
			arguments += object PL::CompoundTerm { value := "FLOWS" };
			arguments += object PL::CompoundTerm { value := "READFLOWS" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::CompoundTerm {
				value := "writeFlows";
				arguments += object PL::CompoundTerm { value := "FLOWS" };
				arguments += object PL::CompoundTerm { value := "WRITEFLOWS" };
			};
			right := object PL::CompoundTerm {
				value := "subtract";
				arguments += object PL::CompoundTerm { value := "FLOWS" };
				arguments += object PL::CompoundTerm { value := "WRITEFLOWS" };
				arguments += object PL::CompoundTerm { value := "READFLOWS" };
			};
		};
	};
	result += object PL::Fact {
		head := object PL::CompoundTerm {
			value := "writeFlows";
			arguments += object PL::_List {};
			arguments += object PL::_List {};
		};
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "writeFlows";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "F" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "WRITEFLOWS" };
		};
		var dataFlowTerm := object PL::CompoundTerm {
			value := "dataflow";
			arguments += object PL::CompoundTerm { value := "F" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "_" };
		};
		var storeTerm := object PL::CompoundTerm {
			value := "store";
			arguments += object PL::CompoundTerm { value := "N" };
		};
		var cutTerm := object PL::Cut {};
		var recurseTerm := object PL::CompoundTerm {
			value := "writeFlows";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "RECURSEFLOWS" };
		};
		var mergeTerm := object PL::expressions::Unification {
			left := object PL::CompoundTerm { value := "WRITEFLOWS" };
			right := object PL::_List {
				heads += object PL::CompoundTerm { value := "F" };
				tails += object PL::CompoundTerm { value := "RECURSEFLOWS" };
			};
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := object PL::expressions::LogicalAnd {
						left := dataFlowTerm;
						right := storeTerm;
					};
					right := cutTerm;
				}; 
				right := recurseTerm;
			};
			right := mergeTerm;
		};
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "writeFlows";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "F" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "WRITEFLOWS" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::CompoundTerm {
				value := "dataflow";
				arguments += object PL::CompoundTerm { value := "F" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
			};
			right := object PL::CompoundTerm {
				value := "writeFlows";
				arguments += object PL::CompoundTerm { value := "T" };
				arguments += object PL::CompoundTerm { value := "WRITEFLOWS" };
			};
		};
	};
}

mapping DFD::DataFlowDiagram::createDataDependenciesHelpers() : List(PL::Clause) {
	result += new Comment("");
	result += new Comment("Helper rules to determine affected data flows by one node");
	result += new Comment("");
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "associatedFlowsClosure";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		var directNodesTerm := object PL::CompoundTerm {
			value := "directAssociatedNodes";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "NODES" };
		};
		var associatedFlowsTerm := object PL::CompoundTerm {
			value := "associatedFlows";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "NODES" };
			};
			arguments += object PL::_List {};
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		
		body := object PL::expressions::LogicalAnd {
			left := directNodesTerm;
			right := associatedFlowsTerm;
		};
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "directAssociatedNodes";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "NODES" };
		};
		var findDstNodesTerm := object PL::CompoundTerm {
			value := "findall";
			arguments += object PL::CompoundTerm { value := "X" };
			arguments += object PL::CompoundTerm {
				value := "dataflow";
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "N" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "X" };
				arguments += object PL::CompoundTerm { value := "_" };
			};
			arguments += object PL::CompoundTerm { value := "DSTNODES" };
		};
		var findSrcNodesTerm := object PL::CompoundTerm {
			value := "findall";
			arguments += object PL::CompoundTerm { value := "Y" };
			arguments += object PL::CompoundTerm {
				value := "dataflow";
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "Y" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "N" };
				arguments += object PL::CompoundTerm { value := "_" };
			};
			arguments += object PL::CompoundTerm { value := "SRCNODES" };
		};
		var mergeTerm := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "DSTNODES" };
			arguments += object PL::CompoundTerm { value := "SRCNODES" };
			arguments += object PL::CompoundTerm { value := "TMP" };
		};
		var setTerm := object PL::CompoundTerm {
			value := "list_to_set";
			arguments += object PL::CompoundTerm { value := "TMP" };
			arguments += object PL::CompoundTerm { value := "NODES" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := findDstNodesTerm;
					right := findSrcNodesTerm;
				};
				right := mergeTerm;
			};
			right := setTerm;
		};
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "directFlows";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		var findAllOutFlows := object PL::CompoundTerm {
			value := "findall";
			arguments += object PL::CompoundTerm { value := "X" };
			arguments += object PL::CompoundTerm {
				value := "dataflow";
				arguments += object PL::CompoundTerm { value := "X" };
				arguments += object PL::CompoundTerm { value := "N" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
			};
			arguments += object PL::CompoundTerm { value := "OUTFLOWS" };
		};
		var findAllInFlows := object PL::CompoundTerm {
			value := "findall";
			arguments += object PL::CompoundTerm { value := "Y" };
			arguments += object PL::CompoundTerm {
				value := "dataflow";
				arguments += object PL::CompoundTerm { value := "Y" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "_" };
				arguments += object PL::CompoundTerm { value := "N" };
				arguments += object PL::CompoundTerm { value := "_" };
			};
			arguments += object PL::CompoundTerm { value := "INFLOWS" };
		};
		var mergeFlows := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "OUTFLOWS" };
			arguments += object PL::CompoundTerm { value := "INFLOWS" };
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := findAllOutFlows;
				right := findAllInFlows;			
			};
			right := mergeFlows;
		};
	};
	result += object PL::Fact {
		head := object PL::CompoundTerm {
			value := "associatedFlows" ;
			arguments += object PL::_List {};
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::_List {};
		}
	};
	result += createSkipAssociatedFlowsRule("store", 1);
	result += createSkipAssociatedFlowsRule("actor", 1);
	result += createSkipAssociatedFlowsRule("actorProcess", 2);
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "associatedFlows" ;
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "NPROCESSED" };
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		var directFlowsTerm := object PL::CompoundTerm {
			value := "directFlows";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "DIRECTFLOWS" };
		};
		var associatedNodesTerm := object PL::CompoundTerm {
			value := "associatedNodes";
			arguments += object PL::CompoundTerm { value := "DIRECTFLOWS" };
			arguments += object PL::CompoundTerm { value := "NEWNODES" };
		};
		var appendNodesTerm := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "NEWNODES" };
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "TMP" };
		};
		var nodeSetTerm := object PL::CompoundTerm {
			value := "list_to_set";
			arguments += object PL::CompoundTerm { value := "TMP" };
			arguments += object PL::CompoundTerm { value := "NCANDIDATE" };
		};
		var extendedProcessedNodesTerm := object PL::expressions::Unification {
			left := object PL::CompoundTerm { value := "NEWPROCESSED" };
			right := object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "NPROCESSED" };
			}
		};
		var newQueueTerm := object PL::CompoundTerm {
			value := "subtract";
			arguments += object PL::CompoundTerm { value := "NCANDIDATE" };
			arguments += object PL::CompoundTerm { value := "NEWPROCESSED" };
			arguments += object PL::CompoundTerm { value := "NQUEUE" };
		};
		var recurseTerm := object PL::CompoundTerm {
			value := "associatedFlows";
			arguments += object PL::CompoundTerm { value := "NQUEUE" };
			arguments += object PL::CompoundTerm { value := "NEWPROCESSED" };
			arguments += object PL::CompoundTerm { value := "RECURSEFLOWS" };
		};
		var appendFlowsTerm := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "DIRECTFLOWS" };
			arguments += object PL::CompoundTerm { value := "RECURSEFLOWS" };
			arguments += object PL::CompoundTerm { value := "FLOWLIST" };
		};
		var flowSetTerm := object PL::CompoundTerm {
			value := "list_to_set";
			arguments += object PL::CompoundTerm { value := "FLOWLIST" };
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := object PL::expressions::LogicalAnd {
						left := object PL::expressions::LogicalAnd {
							left := object PL::expressions::LogicalAnd {
								left := object PL::expressions::LogicalAnd {
									left := object PL::expressions::LogicalAnd {
										left := directFlowsTerm;
										right := associatedNodesTerm;
									};
									right := appendNodesTerm;
								};
								right := nodeSetTerm;
							};
							right := extendedProcessedNodesTerm;
						};
						right := newQueueTerm;
					};
					right := recurseTerm;
				};
				right := appendFlowsTerm;
			};
			right := flowSetTerm;
		};
	};
	result += object PL::Fact {
		head := object PL::CompoundTerm {
			value := "associatedNodes";
			arguments += object PL::_List {};
			arguments += object PL::_List {};
		}
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "associatedNodes";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "F" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "NODES" };
		};
		var sourceNodeTerm := object PL::CompoundTerm {
			value := "dataflow";
			arguments += object PL::CompoundTerm { value := "F" };
			arguments += object PL::CompoundTerm { value := "NSRC" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
		};
		var destinationNodeTerm := object PL::CompoundTerm {
			value := "dataflow";
			arguments += object PL::CompoundTerm { value := "F" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "NDST" };
			arguments += object PL::CompoundTerm { value := "_" };
		};
		var associatedNodesTerm := object PL::CompoundTerm {
			value := "associatedNodes";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "NRECURSE" };
		};
		var mergeTerm := object PL::expressions::Unification {
			left := object PL::CompoundTerm { value := "MERGED" };
			right := object PL::_List {
				heads += object PL::CompoundTerm { value := "NSRC" };
				heads += object PL::CompoundTerm { value := "NDST" };
				tails += object PL::CompoundTerm { value := "NRECURSE" };
			};
		};
		var setTerm := object PL::CompoundTerm {
			value := "list_to_set";
			arguments += object PL::CompoundTerm { value := "MERGED" };
			arguments += object PL::CompoundTerm { value := "NODES" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := object PL::expressions::LogicalAnd {
						left := sourceNodeTerm;
						right := destinationNodeTerm;
					};
					right := associatedNodesTerm;
				};
				right := mergeTerm;
			};
			right := setTerm;
		};
	};
}

helper createSkipAssociatedFlowsRule(nodeType : String, nodeTypeArity : Integer) : PL::Rule {
	var ignoredArgumentsList : OrderedSet(PL::CompoundTerm);
	var cnt := nodeTypeArity - 1;
	while (cnt > 0) {
		cnt := cnt - 1;
		ignoredArgumentsList += object PL::CompoundTerm { value := "_" };
	};

	return object PL::Rule {
		head := object PL::CompoundTerm {
			value := "associatedFlows" ;
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "NPROCESSED" };
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		var nodeTypeTerm :=  object PL::CompoundTerm {
			value := nodeType;
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += ignoredArgumentsList;
		};
		var cutTerm := object PL::Cut {};
		var delegationTerm := object PL::CompoundTerm {
			value := "associatedFlows";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "NPROCESSED" };
			};
			arguments += object PL::CompoundTerm { value := "FLOWS" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := nodeTypeTerm;
				right := cutTerm; 
			};
			right := delegationTerm;
		};
	};
}

mapping DFD::DataFlowDiagram::createDataTypeHelpers() : List(PL::Clause) {

	result += new Comment("");
	result += new Comment("Helper rules to determine a possible set of previous data flows for a given node");
	result += new Comment("");
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "sourceFlowClosure";
			arguments += object PL::CompoundTerm { value := "P" };
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		var body1 := object PL::CompoundTerm {
			value := "inputFlowsSelection";
			arguments += object PL::CompoundTerm { value := "P" };
			arguments += object PL::CompoundTerm { value := "S" }; 			
		};
		var body2 := object PL::CompoundTerm {
			value := "sourceNodesOfFlowList";
			arguments += object PL::CompoundTerm { value := "S" };
			arguments += object PL::CompoundTerm { value := "NODES" }; 			
		};
		var body3 := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::CompoundTerm { value := "NODES" };
			arguments += object PL::CompoundTerm { value := "TMP" };		
		};
		var body4 := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "S" };
			arguments += object PL::CompoundTerm { value := "TMP" };
			arguments += object PL::CompoundTerm { value := "CLOSURE" };		
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := body1;
					right := body2;
				};
				right := body3;
			};
			right := body4;
		};
	};
	result += object PL::Fact {
		head := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::_List {};
			arguments += object PL::_List {};
		}
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		var body1 := object PL::CompoundTerm {
			value := "actor";
			arguments += object PL::CompoundTerm { value := "N" };
		};
		var body2 := object PL::Cut {};
		var body3 := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := body1;
				right := body2;
			};
			right := body3;
		};
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "N" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		var body1 := object PL::CompoundTerm {
			value := "sourceFlowClosure";
			arguments += object PL::CompoundTerm { value := "N" };
			arguments += object PL::CompoundTerm { value := "NFLOWS" };
		};
		var body2 := object PL::CompoundTerm {
			value := "sourceFlowClosureOfNodeList";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "TFLOWS" };
		};
		var body3 := object PL::CompoundTerm {
			value := "append";
			arguments += object PL::CompoundTerm { value := "NFLOWS" };
			arguments += object PL::CompoundTerm { value := "TFLOWS" };
			arguments += object PL::CompoundTerm { value := "CLOSURE" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := body1;
				right := body2;
			};
			right := body3;
		};
	};
	result += object PL::Fact {
		head := object PL::CompoundTerm {
			value := "sourceNodesOfFlowList";
			arguments += object PL::_List {};
			arguments += object PL::_List {};
		}
	};
	result += object PL::Rule {
		head := object PL::CompoundTerm {
			value := "sourceNodesOfFlowList";
			arguments += object PL::_List {
				heads += object PL::CompoundTerm { value := "F" };
				tails += object PL::CompoundTerm { value := "T" };
			};
			arguments += object PL::CompoundTerm { value := "N" };
		};
		var body1 := object PL::CompoundTerm {
			value := "dataflow";
			arguments += object PL::CompoundTerm { value := "F" };
			arguments += object PL::CompoundTerm { value := "P" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
			arguments += object PL::CompoundTerm { value := "_" };
		};
		var body2 := object PL::CompoundTerm {
			value := "sourceNodesOfFlowList";
			arguments += object PL::CompoundTerm { value := "T" };
			arguments += object PL::CompoundTerm { value := "NLIST" };
		};
		var body3 := object PL::expressions::Unification {
			left := object PL::CompoundTerm { value := "NEWLIST" };
			right := object PL::_List {
				heads += object PL::CompoundTerm { value := "P" };
				tails += object PL::CompoundTerm { value := "NLIST" };
			};
		};
		var body4 := object PL::CompoundTerm {
			value := "list_to_set";
			arguments += object PL::CompoundTerm { value := "NEWLIST" };
			arguments += object PL::CompoundTerm { value := "N" };
		};
		body := object PL::expressions::LogicalAnd {
			left := object PL::expressions::LogicalAnd {
				left := object PL::expressions::LogicalAnd {
					left := body1;
					right := body2;
			};
				right := body3;
			};
			right := body4;
		};
	};
	
}